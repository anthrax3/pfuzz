#!/usr/bin/python

import argparse
import sys
import re

#load the plugin
def load_plugin(name):
    mod = __import__("pf6mod_%s" % name)
    return mod

#call the plugin
def call_plugin(name, *args):
    plugin = load_plugin(name)
    return plugin.plugin_main(*args)
    
def h_iter(sStart, sEnd):
    output = []
    try:
        iStart = int(sStart, 16)
        iEnd = int (sEnd, 16)
        if (iEnd > iStart):
            for i in range(iStart, iEnd+1):
                #print "%s %s %i" % (hex(i), hex(i)[2:],i)
                output.append(hex(i)[2:])
                #print output
        else:
            print "Hex is backwards"
            sys.exit(0)
    except ValueError:
        print "Invalid hex specified"
        sys.exit(0)
    
    return output
        

def prefix_parse(prefix):
    prefixes = []
    reHRange = re.compile("\[([a-fA-F0-9]{1,4})\-([a-fA-F0-9]{1,4})\]")
    try:
        m = reHRange.findall(prefix)
        lPrefixes = []
        oPrefixes = []
        lPrefixes.append(prefix)
        for reT in m:
            oPrefixes = []
            lIters = h_iter(reT[0],reT[1])
            for lIterable in lIters:
                for t_prefix in lPrefixes:
                    oPrefixes.append(t_prefix.replace("[%s-%s]" % (reT[0], reT[1]),lIterable,1))
            lPrefixes = oPrefixes
    except TypeError:
        pass
    return oPrefixes

#make sure prefix is valid
def prefix_sanitize(prefix):
    #check v6 address format
    # 2 acceptable inputs - fully qualified, or prefix notation
    bValid = False
    
    reSAddr = re.compile("[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:")
    try:
        if (reSAddr.match(prefix)):
            #match for long format
            bValid = True
    except TypeError:
        bValid = False
    try:
        if (prefix[len(prefix)-2] == "::"):
            #match for prefix
            bValid = True
    except TypeError:
        bValid = False
    
    
    return bValid

        
################
#entrypoint
################

#versioning information
prefix = ""
plugins = ["dhcp","ports"]
addrs = []

#handle command line arguments
parser = argparse.ArgumentParser(description = "an ipv6 prefix fuzzer", epilog="For more information visit www.dragonresearchgroup.org/pfuzz")
parser.add_argument("prefix", help="prefix to fuzz")
parser.add_argument('--module', action="store", help = "specify a module to use")
parser.add_argument('--module-list', dest="module_list", action="store_true", default=False, help="List modules installed")

#mac module arguments
g_mac = parser.add_argument_group('mac','MAC module options')
g_mac.add_argument("--mac-org", dest="mac_org", action="store", default = "", help = "Organization to check MACs against")

#parse arguments
args = parser.parse_args()

#grab the prefix
prefixes = prefix_parse(args.prefix)
print prefixes

#make sure they are valid
#if (prefix_sanitize(prefix) == False):
#    print "Invalid prefix specified"
#    sys.exit(0)
    
#do they want us to list the modules
if (args.module_list == True):
    print "Installed Modules:"
    print plugins
    sys.exit(0)
    
#is a parser set?
if (args.module != None):
    plugins = [args.module]
    
#iterate over prefixes
for prefix in prefixes:
    #iterate over plugins
    for plugin in plugins:
        plugin_addrs = call_plugin(plugin, prefix, args)
        if plugin_addrs != None:
            for addr in plugin_addrs:
                addrs.append(addr)

#remove duplicates
finalized_addrs = list(set(addrs))

#output options
for addr in finalized_addrs:
    print addr