#!/usr/bin/python
#
#   pfuzz
#   a prefix fuzzer for IPv6 networks
#
#   a project of the Dragon Research Group <dragonresearchgroup.org>
#   license: GNU GPL v3 <http://www.gnu.org/licenses/gpl-3.0.txt>
#   author: Will Urbanski <will.urbanski@gmail.com>
#

import sys
import re
import random
import time
from optparse import OptionParser

#load the plugin
def load_plugin(name):
    mod = __import__("pf6mod_%s" % name)
    return mod

#get the plugin info
def call_plugin_info(name):
    plugin = load_plugin(name)
    return [plugin.plugin_description(), plugin.plugin_usage()]

#call the plugin
def call_plugin(name, *args):
    plugin = load_plugin(name)
    return plugin.plugin_main(*args)
    
#for printing performance information
def perf_log(value):
    global options
    if (options.performance_test == True):
        print "[%f] %s" % (time.time(),value)
    
    
def h_iter(sStart, sEnd):
    output = []
    try:
        iStart = int(sStart, 16)
        iEnd = int (sEnd, 16)
        if (iEnd > iStart):
            for i in range(iStart, iEnd+1):
                #print "%s %s %i" % (hex(i), hex(i)[2:],i)
                output.append(hex(i)[2:])
                #print output
        else:
            print "Hex is backwards"
            sys.exit(0)
    except ValueError:
        print "Invalid hex specified"
        sys.exit(0)
    
    return output
        

def prefix_parse(prefix):
    prefixes = []
    reHRange = re.compile("\[([a-fA-F0-9]{1,4})\-([a-fA-F0-9]{1,4})\]")
    try:
	m = reHRange.findall(prefix)
	if (len(m) == 0):
	    oPrefixes = [prefix]
	else:
	    lPrefixes = []
	    oPrefixes = []
	    lPrefixes.append(prefix)
	    for reT in m:
		oPrefixes = []
		lIters = h_iter(reT[0],reT[1])
		for lIterable in lIters:
		    for t_prefix in lPrefixes:
			oPrefixes.append(t_prefix.replace("[%s-%s]" % (reT[0], reT[1]),lIterable,1))
		lPrefixes = oPrefixes
    except TypeError:
        pass
    return oPrefixes

#make sure prefix is valid
def prefix_sanitize(prefix):
    #check v6 address format
    bValid = False
    
    reSAddr = re.compile("[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:[0-9A-F]{1,4}:")
    try:
        if (reSAddr.match(prefix)):
            #match for long format
            bValid = True
    except TypeError:
        bValid = False
    try:
        if (prefix[len(prefix)-2] == "::"):
            #match for prefix
            bValid = True
    except TypeError:
        bValid = False
    
    
    return bValid


#optparse related functions
def optp_module_callback(option, opt, value, parser):
    if (value != None):
        setattr(parser.values, option.dest, value.split(','))
        
################
#entrypoint
################

pfuzz_logo = """

           $$$$$$\                                
          $$  __$$\                               
 $$$$$$\  $$ /  \__|$$\   $$\ $$$$$$$$\ $$$$$$$$\ 
$$  __$$\ $$$$\     $$ |  $$ |\____$$  |\____$$  |
$$ /  $$ |$$  _|    $$ |  $$ |  $$$$ _/   $$$$ _/ 
$$ |  $$ |$$ |      $$ |  $$ | $$  _/    $$  _/   
$$$$$$$  |$$ |      \$$$$$$  |$$$$$$$$\ $$$$$$$$\ 
$$  ____/ \__|       \______/ \________|\________|
$$ |                                              
$$ |                                              
\__|	a project of the dragon research group                                              

"""



#versioning information
prefix = ""
installed_plugins = ["dhcp","ports","mac"]
plugins = ["dhcp","ports"]
addrs = []

#handle command line arguments
oparser = OptionParser()
oparser.set_description("A prefix fuzzer for IPv6 networks")
oparser.set_usage("\n./pfuzz 2001:468:c80:1::\n./pfuzz -m mac --mac-org=Vmware 2001:468:c80::beef:\n./pfuzz -m dhcp 2001:468:c80:[a-f]:1")
oparser.add_option("-m", "--module", action="callback", type="string", dest="module", default="dhcp", callback=optp_module_callback, help="specify the generation module to use. multiple modules should be seperated with commas")
oparser.add_option("-l", "--list-modules", action="store_true", dest="module_list", default=False, help="List module information")
oparser.add_option("--mac-org", action="store", dest="mac_org", default="", help="Organization to check MACs against")
oparser.add_option("-s","--sample", type="int", action="store", dest="sample_size", default=0, help="Number of IPs to sample")
oparser.add_option("-t","--test", action="store_true", dest="performance_test", default=False, help="Print performance information")
oparser.add_option("-p","--percentage", type="float", action="store", dest="percentage_target", default=0, help="Percentage target")
(options, args) = oparser.parse_args()

#do they want us to list the modules
#if (args.module_list == True):
if (options.module_list == True):
	print pfuzz_logo
	print "Installed Modules:"
	for it_plugin in installed_plugins:
	    print "\n *** %s *** " % it_plugin
	    plugin_info = call_plugin_info(it_plugin)
	    print "description:\n%s\n" % plugin_info[0]
	    print "usage:\n%s" % plugin_info[1]
	sys.exit(0)

#make sure the prefix is specified
if (len(args) == 0 or args[0] == None):
        print "Fatal: You must specify a prefix to fuzz"
        oparser.print_help()
        sys.exit(0)


#grab the prefix
perf_log("About to parse prefixes: %s" % args[0])
prefixes = prefix_parse(args[0])
perf_log("Prefix parse completed")
#print prefixes
    
#is a parser set?
if (len(options.module) > 0):
    plugins = options.module
    
#iterate over prefixes
for prefix in prefixes:
    if (prefix[len(prefix)-1] == ":"):
        #iterate over plugins
        for plugin in plugins:
            #print plugin[0]
            #print prefix
            #print options
            plugin_addrs = call_plugin(plugin, prefix, options)
            if plugin_addrs != None:
                for addr in plugin_addrs:
                    addrs.append(addr)
    else:
        addrs.append(prefix)

#PERF remove duplicates
perf_log("About to dedup addrs, which has %i members" % len(addrs))
perf_raw_addr_count = len(addrs)
finalized_addrs = list(set(addrs))

#Percentage target OR sample size, not both!
if (options.sample_size != 0 and options.percentage_target != 0):
    #we cannot have both
    print "Fatal: You cannot set a sample size and a percentage target!"
    oparser.print_help()
    sys.exit(0)
elif (options.percentage_target != 0):
    #figure out sample sized based on percentage target
    options.sample_size = int(round(perf_raw_addr_count * (options.percentage_target * .01)))
    perf_log("Percentage target convered to sample size %i" % options.sample_size)

if (options.sample_size != 0 and options.sample_size < len(finalized_addrs)):
    #only return a certain number of results
    sample_size = options.sample_size
    max_addrs = len(finalized_addrs)
    t_addrs = finalized_addrs
    finalized_addrs = []
    for i in range(0, sample_size):
        rand_int = random.randint(0,max_addrs-i-1)
        s_addr = t_addrs[rand_int]
        finalized_addrs.append(s_addr)
        t_addrs.remove(s_addr)
elif (options.sample_size > len(finalized_addrs)):
    print "Fatal: Sample size is too large for result set."
    oparser.print_help()
    sys.exit(0)

#PERF
perf_log("About to iterate finalized_addrs, which has %i members" % len(finalized_addrs))
#output options
if (options.performance_test == True):
    print "%i raw addresses identified by fuzzer" % perf_raw_addr_count
    if (options.sample_size > 0):
        print "%i addresses restricted by sampler" % options.sample_size
        perf_total = options.sample_size
        perf_pct = float((float(options.sample_size) / float(perf_raw_addr_count))*100)
    else:
        perf_total = perf_raw_addr_count
        perc_pct = 100
    
    print "%i total addresses printed to stdout" % perf_total
    print "%f%% addresses represnted by sample" % perf_pct
else:
    for addr in finalized_addrs:
        print addr
