#!/usr/bin/python

import argparse
import sys

#load the plugin
def load_plugin(name):
    mod = __import__("pf6mod_%s" % name)
    return mod

#call the plugin
def call_plugin(name, *args):
    plugin = load_plugin(name)
    return plugin.plugin_main(*args)

#make sure prefix is valid
def prefix_sanitize(prefix):
    #does prefix end in :: ?
    if (prefix[len(prefix)-2] != "::"):
        prefix = "%s::" % prefix
    
################
#entrypoint
################

#versioning information
app_version = "1.0"
prefix = ""
plugins = ["dhcp","ports", "mac"]
addrs = []

#handle command line arguments
parser = argparse.ArgumentParser(description = "an ipv6 prefix fuzzer", epilog="For more information visit www.dragonresearchgroup.org/pfuzz")
parser.add_argument("prefix", help="prefix to fuzz")
parser.add_argument('--module', action="store", help = "specify a module to use")
parser.add_argument('--module-list', dest="module_list", action="store_true", default=False, help="List modules installed")

#mac module arguments
g_mac = parser.add_argument_group('mac','MAC module options')
g_mac.add_argument("--mac-org", dest="mac_org", action="store", default = "", help = "Organization to check MACs against")

#parse arguments
args = parser.parse_args()

#grab the prefix
prefix = args.prefix
    
#do they want us to list the modules
if (args.module_list == True):
    print "Installed Modules:"
    print plugins
    sys.exit(0)
    
#is a parser set?
if (args.module != None):
    plugins = [args.module]
    
#iterate over plugins
for plugin in plugins:
    plugin_addrs = call_plugin(plugin, prefix, args)
    if plugin_addrs != None:
        #loop through addresses
        for addr in plugin_addrs:
            addrs.append(addr)

#remove duplicates
finalized_addrs = list(set(addrs))

#output options
for addr in finalized_addrs:
    print addr